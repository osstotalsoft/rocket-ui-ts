"use strict";(self.webpackChunk_totalsoft_rocket_ui=self.webpackChunk_totalsoft_rocket_ui||[]).push([[722],{"./src/stories/feedback/Toast/Toast.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Actions:()=>Actions,Positions:()=>Positions,TextSize:()=>TextSize,Transitions:()=>Transitions,Variants:()=>Variants,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Toast_stories});var react=__webpack_require__("../../../.yarn/berry/cache/react-npm-19.0.0-e33c9aa1c0-10c0.zip/node_modules/react/index.js"),components=__webpack_require__("./src/components/index.ts"),Grid2=__webpack_require__("./.yarn/__virtual__/@mui-material-virtual-caf4cefd95/4/.yarn/berry/cache/@mui-material-npm-6.4.0-9baf3cbb27-10c0.zip/node_modules/@mui/material/Grid2/Grid2.js"),react_toastify_esm=__webpack_require__("./.yarn/__virtual__/react-toastify-virtual-231e17b1e8/4/.yarn/berry/cache/react-toastify-npm-10.0.6-1b9fd56423-10c0.zip/node_modules/react-toastify/dist/react-toastify.esm.mjs");const VariantsPreview=args=>{const addToast=(0,components.dj)(),addPromiseToast=(0,components.eM)();return react.createElement(Grid2.A,{container:!0,spacing:2,justifyItems:"flex-start"},react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast('Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of "de Finibus Bonorum et Malorum" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, "Lorem ipsum dolor sit amet..", comes from a line in section 1.10.32.\nThe standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from "de Finibus Bonorum et Malorum" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of "de Finibus Bonorum et Malorum" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, "Lorem ipsum dolor sit amet..", comes from a line in section 1.10.32.\nThe standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from "de Finibus Bonorum et Malorum" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.',"success",{...args})},"Success toast")),react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This is an info message!","info",{...args})},"Info toast")),react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This is a warning message!","warning",{...args})},"Warning toast")),react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This is an error message!","error",{...args})},"Error toast")),react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This is a default message!",{...args})},"Default toast")),react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addPromiseToast(new Promise((resolve=>setTimeout(resolve,3e3))),{render:()=>"Promise is pending",icon:react_toastify_esm.FI.spinner},{render:()=>"Promise resolved ðŸ‘Œ",icon:react_toastify_esm.FI.success},{render:()=>"Promise rejected ðŸ¤¯",icon:react_toastify_esm.FI.error},{...args,draggable:!0})},"Promise toast")))},Toast_VariantsPreview=VariantsPreview;VariantsPreview.__docgenInfo={description:"",methods:[],displayName:"VariantsPreview"};const PositionsPreview=args=>{const addToast=(0,components.dj)();return react.createElement(Grid2.A,{container:!0,spacing:2,justifyItems:"flex-start"},react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This is a success message!","success",{...args,position:"top-left"})},"Top Left Position")),react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This the default position!","info",{...args,position:"top-center"})},"Top Center Position")),react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This is a warning message!","warning",{...args,position:"top-right"})},"Top Right Position")),react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This is an error message!","error",{...args,position:"bottom-right"})},"Bottom Right Position")),react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This is a default message!","success",{...args,position:"bottom-center"})},"Bottom Center Position")),react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This is a default message!","warning",{...args,position:"bottom-left"})},"Bottom Left Position")))},Toast_PositionsPreview=PositionsPreview;PositionsPreview.__docgenInfo={description:"",methods:[],displayName:"PositionsPreview"};const TransitionsPreview=args=>{const addToast=(0,components.dj)();return react.createElement(Grid2.A,{container:!0,spacing:2,justifyContent:"space-evenly"},react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This is a success message!","success",{...args,transitionType:"Slide"})},"Slide transition")),react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This is an info message!","info",{...args,transitionType:"Zoom"})},"Zoom transition")),react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This is a warning message!","warning",{...args,transitionType:"Bounce"})},"Bounce transition")),react.createElement(Grid2.A,null,react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This is an error message!","error",{...args,transitionType:"Flip"})},"Flip transition")))},Toast_TransitionsPreview=TransitionsPreview;TransitionsPreview.__docgenInfo={description:"",methods:[],displayName:"TransitionsPreview"};var constants=__webpack_require__("./src/components/utils/constants.ts"),Stack=__webpack_require__("./.yarn/__virtual__/@mui-material-virtual-caf4cefd95/4/.yarn/berry/cache/@mui-material-npm-6.4.0-9baf3cbb27-10c0.zip/node_modules/@mui/material/Stack/Stack.js");const ActionsPreview=args=>{const addToast=(0,components.dj)(),CustomMessageWithActions=()=>react.createElement(Stack.A,{direction:"row",alignItems:"flex-end",justifyContent:"flex-end",gap:1},react.createElement(components.$n,{size:"small",onClick:constants.K7,variant:"text",capitalize:!1},react.createElement(components.o5,null,"Button 1")),react.createElement(components.$n,{size:"small",onClick:constants.K7,variant:"text",capitalize:!1},react.createElement(components.o5,null,"Button 2")));return react.createElement(components.$n,{size:"medium",color:"primary",onClick:()=>addToast("This is a custom toast with actions!","success",{...args,actions:react.createElement(CustomMessageWithActions,null)})},"Actions toast")},Toast_ActionsPreview=ActionsPreview;ActionsPreview.__docgenInfo={description:"",methods:[],displayName:"ActionsPreview"};const TextSizePreview=args=>{const addToast=(0,components.dj)();return react.createElement(Grid2.A,{container:!0,spacing:2,justifyItems:"flex-start"},react.createElement(components.N9,args),react.createElement(components.$n,{size:"small",color:"primary",onClick:()=>addToast("This message font will change if you change textSize property of ToastContainer!","success",{...args})},"Change text size from controls."))},Toast_TextSizePreview=TextSizePreview;TextSizePreview.__docgenInfo={description:"",methods:[],displayName:"TextSizePreview"};const Toast_stories={title:"Components/Feedback/Toast",component:components.N9},Variants={parameters:{docs:{source:{code:"const VariantsPreview = () => {\n  const addToast = useToast()\n  const addPromiseToast = usePromiseToast()\n\n  const resolveAfter3Sec = () => new Promise(resolve => setTimeout(resolve, 3000))\n\n  return (\n    <Grid container spacing={2} justifyItems={'flex-start'}>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() =>\n            addToast(\n              'Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, Lorem ipsum dolor sit amet.., comes from a line in section The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from de Finibus Bonorum et Malorum by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from de Finibus Bonorum et Malorum by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.',\n              'success'\n            )\n          }\n        >\n          {'Success toast'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button size={'small'} color={'primary'} onClick={() => addToast('This is an info message!', 'info')}>\n          {'Info toast'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button size={'small'} color={'primary'} onClick={() => addToast('This is a warning message!', 'warning')}>\n          {'Warning toast'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button size={'small'} color={'primary'} onClick={() => addToast('This is an error message!', 'error')}>\n          {'Error toast'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button size={'small'} color={'primary'} onClick={() => addToast('This is a default message!')}>\n          {'Default toast'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() =>\n            addPromiseToast(\n              resolveAfter3Sec(),\n              {\n                render() {\n                  return 'Promise is pending'\n                },\n                icon: Icons.spinner\n              },\n              {\n                render() {\n                  return 'Promise resolved ðŸ‘Œ'\n                },\n                icon: Icons.success\n              },\n              {\n                render() {\n                  return 'Promise rejected ðŸ¤¯'\n                },\n                icon: Icons.error\n              },\n\n              {\n                draggable: true\n              }\n            )\n          }\n        >\n          {'Promise toast'}\n        </Button>\n      </Grid>\n    </Grid>\n  )\n}",format:!0}}},render:args=>react.createElement(Toast_VariantsPreview,args)},Positions={parameters:{docs:{source:{code:"const PositionsPreview = () => {\n  const addToast = useToast()\n\n  return (\n    <Grid container spacing={2} justifyItems={'flex-start'}>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is a success message!', 'success', { position: 'top-left' })}\n        >\n          {'Top Left Position'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This the default position!', 'info', { position: 'top-center' })}\n        >\n          {'Top Center Position'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is a warning message!', 'warning', { position: 'top-right' })}\n        >\n          {'Top Right Position'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is an error message!', 'error', { position: 'bottom-right' })}\n        >\n          {'Bottom Right Position'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is a default message!', 'success', { position: 'bottom-center' })}\n        >\n          {'Bottom Center Position'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is a default message!', 'warning', { position: 'bottom-left' })}\n        >\n          {'Bottom Left Position'}\n        </Button>\n      </Grid>\n    </Grid>\n  )\n}",format:!0}}},render:args=>react.createElement(Toast_PositionsPreview,args)},Transitions={parameters:{docs:{source:{code:"<Grid container spacing={2} justifyContent={'space-evenly'}>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is a success message!', 'success', { transitionType: 'Slide' })}\n        >\n          {'Slide transition'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is an info message!', 'info', { transitionType: 'Zoom' })}\n        >\n          {'Zoom transition'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is a warning message!', 'warning', { transitionType: 'Bounce' })}\n        >\n          {'Bounce transition'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is an error message!', 'error', { transitionType: 'Flip' })}\n        >\n          {'Flip transition'}\n        </Button>\n      </Grid>\n    </Grid>",format:!0}}},render:args=>react.createElement(Toast_TransitionsPreview,args)},Actions={parameters:{docs:{source:{code:"const ActionsPreview = () => {\n  const addToast = useToast()\n\n  const CustomMessageWithActions = () => (\n    <Stack direction=\"row\" alignItems=\"flex-end\" justifyContent=\"flex-end\" gap={1}>\n       <Button size={'small'} onClick={emptyFunction} variant=\"text\" capitalize={false}>\n         <Typography>{'Button 1'}</Typography>\n       </Button>\n       <Button size={'small'} onClick={emptyFunction} variant=\"text\" capitalize={false}>\n         <Typography>{'Button 2'}</Typography>\n       </Button>\n    </Stack>\n  )\n\n  return (\n    <Button\n      size={'medium'}\n      color={'primary'}\n      onClick={() =>\n        addToast('This is a custom toast with actions!', 'success', {\n          actions: <CustomMessageWithActions />\n        })\n      }\n    >\n      {'Actions toast'}\n    </Button>\n  )\n}",format:!0}}},render:args=>react.createElement(Toast_ActionsPreview,args)},TextSize={parameters:{docs:{source:{code:"      <ToastContainer textSize={textSize} />\n      <Button\n        size={'small'}\n        color={'primary'}\n        onClick={() =>\n          addToast('This message font will change if you change textSize property of ToastContainer!', 'success', {\n            ...args\n          })\n        }\n      >\n        {'Change text size from controls.'}\n      </Button>",format:!0}}},render:args=>react.createElement(Toast_TextSizePreview,args)},__namedExportsOrder=["Variants","Positions","Transitions","Actions","TextSize"];Variants.parameters={...Variants.parameters,docs:{...Variants.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      source: {\n        code: `const VariantsPreview = () => {\n  const addToast = useToast()\n  const addPromiseToast = usePromiseToast()\n\n  const resolveAfter3Sec = () => new Promise(resolve => setTimeout(resolve, 3000))\n\n  return (\n    <Grid container spacing={2} justifyItems={'flex-start'}>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() =>\n            addToast(\n              'Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, Lorem ipsum dolor sit amet.., comes from a line in section The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from de Finibus Bonorum et Malorum by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from de Finibus Bonorum et Malorum by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.',\n              'success'\n            )\n          }\n        >\n          {'Success toast'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button size={'small'} color={'primary'} onClick={() => addToast('This is an info message!', 'info')}>\n          {'Info toast'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button size={'small'} color={'primary'} onClick={() => addToast('This is a warning message!', 'warning')}>\n          {'Warning toast'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button size={'small'} color={'primary'} onClick={() => addToast('This is an error message!', 'error')}>\n          {'Error toast'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button size={'small'} color={'primary'} onClick={() => addToast('This is a default message!')}>\n          {'Default toast'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() =>\n            addPromiseToast(\n              resolveAfter3Sec(),\n              {\n                render() {\n                  return 'Promise is pending'\n                },\n                icon: Icons.spinner\n              },\n              {\n                render() {\n                  return 'Promise resolved ðŸ‘Œ'\n                },\n                icon: Icons.success\n              },\n              {\n                render() {\n                  return 'Promise rejected ðŸ¤¯'\n                },\n                icon: Icons.error\n              },\n\n              {\n                draggable: true\n              }\n            )\n          }\n        >\n          {'Promise toast'}\n        </Button>\n      </Grid>\n    </Grid>\n  )\n}`,\n        format: true\n      }\n    }\n  },\n  render: args => <VariantsPreview {...args} />\n}",...Variants.parameters?.docs?.source},description:{story:"There are multiple variants form which you can choose from:\n- success\n- info\n- warning\n- error\n- promise",...Variants.parameters?.docs?.description}}},Positions.parameters={...Positions.parameters,docs:{...Positions.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      source: {\n        code: `const PositionsPreview = () => {\n  const addToast = useToast()\n\n  return (\n    <Grid container spacing={2} justifyItems={'flex-start'}>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is a success message!', 'success', { position: 'top-left' })}\n        >\n          {'Top Left Position'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This the default position!', 'info', { position: 'top-center' })}\n        >\n          {'Top Center Position'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is a warning message!', 'warning', { position: 'top-right' })}\n        >\n          {'Top Right Position'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is an error message!', 'error', { position: 'bottom-right' })}\n        >\n          {'Bottom Right Position'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is a default message!', 'success', { position: 'bottom-center' })}\n        >\n          {'Bottom Center Position'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is a default message!', 'warning', { position: 'bottom-left' })}\n        >\n          {'Bottom Left Position'}\n        </Button>\n      </Grid>\n    </Grid>\n  )\n}`,\n        format: true\n      }\n    }\n  },\n  render: args => <PositionsPreview {...args} />\n}",...Positions.parameters?.docs?.source},description:{story:"Different positions are available for rendering toast.",...Positions.parameters?.docs?.description}}},Transitions.parameters={...Transitions.parameters,docs:{...Transitions.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      source: {\n        code: `<Grid container spacing={2} justifyContent={'space-evenly'}>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is a success message!', 'success', { transitionType: 'Slide' })}\n        >\n          {'Slide transition'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is an info message!', 'info', { transitionType: 'Zoom' })}\n        >\n          {'Zoom transition'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is a warning message!', 'warning', { transitionType: 'Bounce' })}\n        >\n          {'Bounce transition'}\n        </Button>\n      </Grid>\n      <Grid>\n        <Button\n          size={'small'}\n          color={'primary'}\n          onClick={() => addToast('This is an error message!', 'error', { transitionType: 'Flip' })}\n        >\n          {'Flip transition'}\n        </Button>\n      </Grid>\n    </Grid>`,\n        format: true\n      }\n    }\n  },\n  render: args => <TransitionsPreview {...args} />\n}",...Transitions.parameters?.docs?.source},description:{story:"You can change the direction of the Toast transition.\nAvailable options are:\n- Slide\n- Bounce\n- Flip\n- Zoom\nDefault is set to 'Slide'.",...Transitions.parameters?.docs?.description}}},Actions.parameters={...Actions.parameters,docs:{...Actions.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      source: {\n        code: `const ActionsPreview = () => {\n  const addToast = useToast()\n\n  const CustomMessageWithActions = () => (\n    <Stack direction=\"row\" alignItems=\"flex-end\" justifyContent=\"flex-end\" gap={1}>\n       <Button size={'small'} onClick={emptyFunction} variant=\"text\" capitalize={false}>\n         <Typography>{'Button 1'}</Typography>\n       </Button>\n       <Button size={'small'} onClick={emptyFunction} variant=\"text\" capitalize={false}>\n         <Typography>{'Button 2'}</Typography>\n       </Button>\n    </Stack>\n  )\n\n  return (\n    <Button\n      size={'medium'}\n      color={'primary'}\n      onClick={() =>\n        addToast('This is a custom toast with actions!', 'success', {\n          actions: <CustomMessageWithActions />\n        })\n      }\n    >\n      {'Actions toast'}\n    </Button>\n  )\n}`,\n        format: true\n      }\n    }\n  },\n  render: args => <ActionsPreview {...args} />\n}",...Actions.parameters?.docs?.source},description:{story:"You can add customized actions to the toast.",...Actions.parameters?.docs?.description}}},TextSize.parameters={...TextSize.parameters,docs:{...TextSize.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      source: {\n        code: `      <ToastContainer textSize={textSize} />\n      <Button\n        size={'small'}\n        color={'primary'}\n        onClick={() =>\n          addToast('This message font will change if you change textSize property of ToastContainer!', 'success', {\n            ...args\n          })\n        }\n      >\n        {'Change text size from controls.'}\n      </Button>`,\n        format: true\n      }\n    }\n  },\n  render: args => <TextSizePreview {...args} />\n}",...TextSize.parameters?.docs?.source},description:{story:"You can change the content font size by changing the ToastContainer textSize parameter of the application\nAvailable options are:\n- small\n- medium\n- large\nDefault is set to 'small'.",...TextSize.parameters?.docs?.description}}}}}]);