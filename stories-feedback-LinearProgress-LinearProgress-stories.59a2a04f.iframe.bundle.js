"use strict";(self.webpackChunk_totalsoft_rocket_ui=self.webpackChunk_totalsoft_rocket_ui||[]).push([[392],{"./src/stories/feedback/LinearProgress/LinearProgress.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Colors:function(){return Colors},Default:function(){return Default},Global:function(){return Global},Variants:function(){return Variants},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return LinearProgress_stories}});var react=__webpack_require__("./.yarn/cache/react-npm-18.2.0-1eae08fee2-88e38092da.zip/node_modules/react/index.js"),Box=__webpack_require__("./.yarn/__virtual__/@mui-material-virtual-6eb82f048f/0/cache/@mui-material-npm-5.16.0-a68e3c876b-3ba69218e2.zip/node_modules/@mui/material/Box/Box.js"),components=__webpack_require__("./src/components/index.ts"),Grid=__webpack_require__("./.yarn/__virtual__/@mui-material-virtual-6eb82f048f/0/cache/@mui-material-npm-5.16.0-a68e3c876b-3ba69218e2.zip/node_modules/@mui/material/Grid/Grid.js"),jsx_runtime=__webpack_require__("./.yarn/cache/react-npm-18.2.0-1eae08fee2-88e38092da.zip/node_modules/react/jsx-runtime.js"),ColorsPreview=function ColorsPreview(){return(0,jsx_runtime.jsxs)(Grid.ZP,{container:!0,rowSpacing:2,columnSpacing:4,children:[(0,jsx_runtime.jsxs)(Grid.ZP,{item:!0,sm:6,children:[(0,jsx_runtime.jsx)(components.ZT,{textAlign:"center",children:"primary"}),(0,jsx_runtime.jsx)(components.uk,{color:"primary"})]}),(0,jsx_runtime.jsxs)(Grid.ZP,{item:!0,sm:6,children:[(0,jsx_runtime.jsx)(components.ZT,{textAlign:"center",children:"warning"}),(0,jsx_runtime.jsx)(components.uk,{color:"warning"})]}),(0,jsx_runtime.jsxs)(Grid.ZP,{item:!0,sm:6,children:[(0,jsx_runtime.jsx)(components.ZT,{textAlign:"center",children:"error"}),(0,jsx_runtime.jsx)(components.uk,{color:"error"})]}),(0,jsx_runtime.jsxs)(Grid.ZP,{item:!0,sm:6,children:[(0,jsx_runtime.jsx)(components.ZT,{textAlign:"center",children:"success"}),(0,jsx_runtime.jsx)(components.uk,{color:"success"})]}),(0,jsx_runtime.jsxs)(Grid.ZP,{item:!0,sm:6,children:[(0,jsx_runtime.jsx)(components.ZT,{textAlign:"center",children:"info"}),(0,jsx_runtime.jsx)(components.uk,{color:"info"})]}),(0,jsx_runtime.jsxs)(Grid.ZP,{item:!0,sm:6,children:[(0,jsx_runtime.jsx)(components.ZT,{textAlign:"center",children:"rose"}),(0,jsx_runtime.jsx)(components.uk,{color:"rose"})]}),(0,jsx_runtime.jsxs)(Grid.ZP,{item:!0,sm:6,children:[(0,jsx_runtime.jsx)(components.ZT,{textAlign:"center",children:"grey (default)"}),(0,jsx_runtime.jsx)(components.uk,{color:"grey"})]})]})};ColorsPreview.displayName="ColorsPreview",ColorsPreview.__docgenInfo={description:"",methods:[],displayName:"ColorsPreview"};var LinearProgress_ColorsPreview=ColorsPreview,VariantsPreview=function VariantsPreview(){var _useState=(0,react.useState)(0),progress=_useState[0],setProgress=_useState[1],_useState2=(0,react.useState)(10),buffer=_useState2[0],setBuffer=_useState2[1],progressRef=(0,react.useRef)((function(){}));return(0,react.useEffect)((function(){progressRef.current=function(){if(100===progress)setProgress(0),setBuffer(10);else{var diff=10*Math.random(),diff2=10*Math.random();setProgress(Math.min(progress+diff,100)),setBuffer(Math.min(progress+diff+diff2,100))}}})),(0,react.useEffect)((function(){var timer=setInterval((function(){progressRef.current()}),500);return function(){clearInterval(timer)}}),[]),(0,jsx_runtime.jsxs)(Grid.ZP,{container:!0,rowSpacing:2,columnSpacing:2,children:[(0,jsx_runtime.jsxs)(Grid.ZP,{item:!0,sm:6,children:[(0,jsx_runtime.jsx)(components.ZT,{textAlign:"center",children:"determinate "}),(0,jsx_runtime.jsx)(components.uk,{variant:"determinate",value:progress})]}),(0,jsx_runtime.jsxs)(Grid.ZP,{item:!0,sm:6,children:[(0,jsx_runtime.jsx)(components.ZT,{textAlign:"center",children:"buffer "}),(0,jsx_runtime.jsx)(components.uk,{variant:"buffer",value:progress,valueBuffer:buffer})]}),(0,jsx_runtime.jsxs)(Grid.ZP,{item:!0,sm:6,children:[(0,jsx_runtime.jsx)(components.ZT,{textAlign:"center",children:"indeterminate"}),(0,jsx_runtime.jsx)(components.uk,{})]}),(0,jsx_runtime.jsxs)(Grid.ZP,{item:!0,sm:6,children:[(0,jsx_runtime.jsx)(components.ZT,{textAlign:"center",children:"determinate with label"}),(0,jsx_runtime.jsx)(components.uk,{variant:"determinate",value:progress,showLabel:!0})]}),(0,jsx_runtime.jsxs)(Grid.ZP,{item:!0,sm:6,children:[(0,jsx_runtime.jsx)(components.ZT,{textAlign:"center",children:"buffer with label"}),(0,jsx_runtime.jsx)(components.uk,{variant:"buffer",value:progress,valueBuffer:buffer,showLabel:!0})]})]})};VariantsPreview.displayName="VariantsPreview",VariantsPreview.__docgenInfo={description:"",methods:[],displayName:"VariantsPreview"};var LinearProgress_VariantsPreview=VariantsPreview,GlobalPreview=function GlobalPreview(){var _useState=(0,react.useState)(!1),show=_useState[0],setShow=_useState[1];return(0,jsx_runtime.jsxs)(Box.Z,{children:[show&&(0,jsx_runtime.jsx)(components.uk,{global:!0}),(0,jsx_runtime.jsx)(components.zx,{onClick:function onClick(){return setShow((function(prev){return!prev}))},children:"Toggle global loader"})]})};GlobalPreview.displayName="GlobalPreview",GlobalPreview.__docgenInfo={description:"",methods:[],displayName:"GlobalPreview"};var _Default$parameters,_Default$parameters2,_Default$parameters3,_Colors$parameters,_Colors$parameters2,_Variants$parameters,_Variants$parameters2,_Global$parameters,_Global$parameters2,LinearProgress_GlobalPreview=GlobalPreview,LinearProgress_stories={title:"Components/Feedback/LinearProgress",component:components.uk,tags:["autodocs"]},Default={render:function render(args){return(0,jsx_runtime.jsx)(Box.Z,{sx:{width:"400px"},children:(0,jsx_runtime.jsx)(components.uk,Object.assign({},args))})}},Colors={parameters:{docs:{source:{code:"\n        <LinearProgress color={'rose'} />\n        ",format:!0}}},render:function render(){return(0,jsx_runtime.jsx)(LinearProgress_ColorsPreview,{})}},Variants={parameters:{docs:{source:{code:"\n        const VariantsPreview = () => {\n          const [progress, setProgress] = useState(0)\n          const [buffer, setBuffer] = useState(10)\n        \n          const progressRef = useRef(() => {})\n        \n          useEffect(() => {\n            progressRef.current = () => {\n              if (progress === 100) {\n                setProgress(0)\n                setBuffer(10)\n              } else {\n                const diff = Math.random() * 10\n                const diff2 = Math.random() * 10\n                setProgress(Math.min(progress + diff, 100))\n                setBuffer(Math.min(progress + diff + diff2, 100))\n              }\n            }\n          })\n        \n          useEffect(() => {\n            const timer = setInterval(() => {\n              progressRef.current()\n            }, 500)\n        \n            return () => {\n              clearInterval(timer)\n            }\n          }, [])\n          return (\n            <Grid container rowSpacing={2} columnSpacing={2}>\n              <Grid item sm={6}>\n                <Typography textAlign={'center'}>{'determinate '}</Typography>\n                <LinearProgress variant={'determinate'} value={progress} />\n              </Grid>\n              <Grid item sm={6}>\n                <Typography textAlign={'center'}>{'buffer '}</Typography>\n                <LinearProgress variant=\"buffer\" value={progress} valueBuffer={buffer} />\n              </Grid>\n              <Grid item sm={6}>\n                <Typography textAlign={'center'}>{'indeterminate'}</Typography>\n                <LinearProgress />\n              </Grid>\n              <Grid item sm={6}>\n                <Typography textAlign={'center'}>{'determinate with label'}</Typography>\n                <LinearProgress variant={'determinate'} value={progress} showLabel />\n              </Grid>\n              <Grid item sm={6}>\n                <Typography textAlign={'center'}>{'buffer with label'}</Typography>\n                <LinearProgress variant=\"buffer\" value={progress} valueBuffer={buffer} showLabel />\n              </Grid>\n            </Grid>\n          )\n        }\n        ",format:!0}}},render:function render(){return(0,jsx_runtime.jsx)(LinearProgress_VariantsPreview,{})}},Global={parameters:{controls:{hideNoControlsWarning:!0},docs:{source:{code:"\n          <LinearProgress global />\n        ",format:!0}}},render:function render(){return(0,jsx_runtime.jsx)(LinearProgress_GlobalPreview,{})}};Default.parameters=Object.assign({},Default.parameters,{docs:Object.assign({},null==(_Default$parameters=Default.parameters)?void 0:_Default$parameters.docs,{source:Object.assign({originalSource:"{\n  render: args => <Box sx={{\n    width: '400px'\n  }}>\n      <LinearProgress {...args} />\n    </Box>\n}"},null==(_Default$parameters2=Default.parameters)||null==(_Default$parameters2=_Default$parameters2.docs)?void 0:_Default$parameters2.source),description:Object.assign({story:"The default `<LinearProgress />` component\n\nThe animations of the components rely on CSS as much as possible to work even before the JavaScript is loaded."},null==(_Default$parameters3=Default.parameters)||null==(_Default$parameters3=_Default$parameters3.docs)?void 0:_Default$parameters3.description)})}),Colors.parameters=Object.assign({},Colors.parameters,{docs:Object.assign({},null==(_Colors$parameters=Colors.parameters)?void 0:_Colors$parameters.docs,{source:Object.assign({originalSource:"{\n  parameters: {\n    docs: {\n      source: {\n        code: `\n        <LinearProgress color={'rose'} />\n        `,\n        format: true\n      }\n    }\n  },\n  render: () => <ColorsPreview />\n}"},null==(_Colors$parameters2=Colors.parameters)||null==(_Colors$parameters2=_Colors$parameters2.docs)?void 0:_Colors$parameters2.source)})}),Variants.parameters=Object.assign({},Variants.parameters,{docs:Object.assign({},null==(_Variants$parameters=Variants.parameters)?void 0:_Variants$parameters.docs,{source:Object.assign({originalSource:"{\n  parameters: {\n    docs: {\n      source: {\n        code: `\n        const VariantsPreview = () => {\n          const [progress, setProgress] = useState(0)\n          const [buffer, setBuffer] = useState(10)\n        \n          const progressRef = useRef(() => {})\n        \n          useEffect(() => {\n            progressRef.current = () => {\n              if (progress === 100) {\n                setProgress(0)\n                setBuffer(10)\n              } else {\n                const diff = Math.random() * 10\n                const diff2 = Math.random() * 10\n                setProgress(Math.min(progress + diff, 100))\n                setBuffer(Math.min(progress + diff + diff2, 100))\n              }\n            }\n          })\n        \n          useEffect(() => {\n            const timer = setInterval(() => {\n              progressRef.current()\n            }, 500)\n        \n            return () => {\n              clearInterval(timer)\n            }\n          }, [])\n          return (\n            <Grid container rowSpacing={2} columnSpacing={2}>\n              <Grid item sm={6}>\n                <Typography textAlign={'center'}>{'determinate '}</Typography>\n                <LinearProgress variant={'determinate'} value={progress} />\n              </Grid>\n              <Grid item sm={6}>\n                <Typography textAlign={'center'}>{'buffer '}</Typography>\n                <LinearProgress variant=\"buffer\" value={progress} valueBuffer={buffer} />\n              </Grid>\n              <Grid item sm={6}>\n                <Typography textAlign={'center'}>{'indeterminate'}</Typography>\n                <LinearProgress />\n              </Grid>\n              <Grid item sm={6}>\n                <Typography textAlign={'center'}>{'determinate with label'}</Typography>\n                <LinearProgress variant={'determinate'} value={progress} showLabel />\n              </Grid>\n              <Grid item sm={6}>\n                <Typography textAlign={'center'}>{'buffer with label'}</Typography>\n                <LinearProgress variant=\"buffer\" value={progress} valueBuffer={buffer} showLabel />\n              </Grid>\n            </Grid>\n          )\n        }\n        `,\n        format: true\n      }\n    }\n  },\n  render: () => <VariantsPreview />\n}"},null==(_Variants$parameters2=Variants.parameters)||null==(_Variants$parameters2=_Variants$parameters2.docs)?void 0:_Variants$parameters2.source)})}),Global.parameters=Object.assign({},Global.parameters,{docs:Object.assign({},null==(_Global$parameters=Global.parameters)?void 0:_Global$parameters.docs,{source:Object.assign({originalSource:"{\n  parameters: {\n    controls: {\n      hideNoControlsWarning: true\n    },\n    docs: {\n      source: {\n        code: `\n          <LinearProgress global />\n        `,\n        format: true\n      }\n    }\n  },\n  render: () => <GlobalPreview />\n}"},null==(_Global$parameters2=Global.parameters)||null==(_Global$parameters2=_Global$parameters2.docs)?void 0:_Global$parameters2.source)})});var __namedExportsOrder=["Default","Colors","Variants","Global"]}}]);