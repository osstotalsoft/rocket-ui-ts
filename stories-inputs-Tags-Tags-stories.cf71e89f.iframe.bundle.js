"use strict";(self.webpackChunk_totalsoft_rocket_ui=self.webpackChunk_totalsoft_rocket_ui||[]).push([[248],{"./src/stories/inputs/Tags/Tags.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Icons:()=>Icons,Size:()=>Size,Variants:()=>Variants,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Tags_stories});var react=__webpack_require__("../../../.yarn/berry/cache/react-npm-19.0.0-e33c9aa1c0-10c0.zip/node_modules/react/index.js"),components=__webpack_require__("./src/components/index.ts"),Grid2=__webpack_require__("./.yarn/__virtual__/@mui-material-virtual-caf4cefd95/4/.yarn/berry/cache/@mui-material-npm-6.4.0-9baf3cbb27-10c0.zip/node_modules/@mui/material/Grid2/Grid2.js"),TagsInput=__webpack_require__("./src/components/inputs/Tags/TagsInput.tsx"),DisplayTags=__webpack_require__("./src/components/inputs/Tags/DisplayTags.tsx"),TypographyStyles=__webpack_require__("./src/components/dataDisplay/Typography/TypographyStyles.ts");const VariantsPreview=()=>react.createElement(Grid2.A,{container:!0,spacing:4},react.createElement(Grid2.A,{container:!0,size:3},react.createElement(Grid2.A,{size:12},react.createElement(TypographyStyles.A,{variant:"body2"},'<TagsInput variant="outlined" color="color_code" />')),react.createElement(Grid2.A,{size:12},react.createElement(TagsInput.A,{variant:"outlined",value:["default"],onChange:()=>{}})),react.createElement(Grid2.A,{size:12},react.createElement(TagsInput.A,{variant:"outlined",value:["error"],onChange:()=>{},color:"error"})),react.createElement(Grid2.A,{size:12},react.createElement(TagsInput.A,{variant:"outlined",value:["info"],onChange:()=>{},color:"info"})),react.createElement(Grid2.A,{size:12},react.createElement(TagsInput.A,{variant:"outlined",value:["primary"],onChange:()=>{},color:"primary"})),react.createElement(Grid2.A,{size:12},react.createElement(TagsInput.A,{variant:"outlined",value:["secondary"],onChange:()=>{},color:"secondary"})),react.createElement(Grid2.A,{size:12},react.createElement(TagsInput.A,{variant:"outlined",value:["success"],onChange:()=>{},color:"success"})),react.createElement(Grid2.A,{size:12},react.createElement(TagsInput.A,{variant:"outlined",value:["warning"],onChange:()=>{},color:"warning"}))),react.createElement(Grid2.A,{container:!0,size:3},react.createElement(Grid2.A,{size:12},react.createElement(TypographyStyles.A,{variant:"body2"},'<DisplayTags variant="outlined" color="color_code" />')),react.createElement(Grid2.A,{size:12},react.createElement(DisplayTags.A,{variant:"outlined",value:["default"]})),react.createElement(Grid2.A,{size:12},react.createElement(DisplayTags.A,{variant:"outlined",value:["error"],color:"error"})),react.createElement(Grid2.A,{size:12},react.createElement(DisplayTags.A,{variant:"outlined",value:["info"],color:"info"})),react.createElement(Grid2.A,{size:12},react.createElement(DisplayTags.A,{variant:"outlined",value:["primary"],color:"primary"})),react.createElement(Grid2.A,{size:12},react.createElement(DisplayTags.A,{variant:"outlined",value:["secondary"],color:"secondary"})),react.createElement(Grid2.A,{size:12},react.createElement(DisplayTags.A,{variant:"outlined",value:["success"],color:"success"})),react.createElement(Grid2.A,{size:12},react.createElement(DisplayTags.A,{variant:"outlined",value:["warning"],color:"warning"}))),react.createElement(Grid2.A,{container:!0,size:3},react.createElement(Grid2.A,{size:12},react.createElement(TypographyStyles.A,{variant:"body2"},'<TagsInput variant="filled" color="color_code" />')),react.createElement(Grid2.A,{size:12},react.createElement(TagsInput.A,{value:["default"],onChange:()=>{}})),react.createElement(Grid2.A,{size:12},react.createElement(TagsInput.A,{value:["error"],onChange:()=>{},color:"error"})),react.createElement(Grid2.A,{size:12},react.createElement(TagsInput.A,{value:["info"],onChange:()=>{},color:"info"})),react.createElement(Grid2.A,{size:12},react.createElement(TagsInput.A,{value:["primary"],onChange:()=>{},color:"primary"})),react.createElement(Grid2.A,{size:12},react.createElement(TagsInput.A,{value:["secondary"],onChange:()=>{},color:"secondary"})),react.createElement(Grid2.A,{size:12},react.createElement(TagsInput.A,{value:["success"],onChange:()=>{},color:"success"})),react.createElement(Grid2.A,{size:12},react.createElement(TagsInput.A,{value:["warning"],onChange:()=>{},color:"warning"}))),react.createElement(Grid2.A,{container:!0,size:3},react.createElement(Grid2.A,{size:12},react.createElement(TypographyStyles.A,{variant:"body2"},'<DisplayTags variant="filled" color="color_code" />')),react.createElement(Grid2.A,{size:12},react.createElement(DisplayTags.A,{value:["default"]})),react.createElement(Grid2.A,{size:12},react.createElement(DisplayTags.A,{value:["error"],color:"error"})),react.createElement(Grid2.A,{size:12},react.createElement(DisplayTags.A,{value:["info"],color:"info"})),react.createElement(Grid2.A,{size:12},react.createElement(DisplayTags.A,{value:["primary"],color:"primary"})),react.createElement(Grid2.A,{size:12},react.createElement(DisplayTags.A,{value:["secondary"],color:"secondary"})),react.createElement(Grid2.A,{size:12},react.createElement(DisplayTags.A,{value:["success"],color:"success"})),react.createElement(Grid2.A,{size:12},react.createElement(DisplayTags.A,{value:["warning"],color:"warning"})))),Tags_VariantsPreview=VariantsPreview;VariantsPreview.__docgenInfo={description:"",methods:[],displayName:"VariantsPreview"};const DefaultPreview=args=>{const[inputValue,setInputValue]=(0,react.useState)(["test"]);return react.createElement(Grid2.A,{container:!0,spacing:4,justifyItems:"flex-start"},react.createElement(Grid2.A,null,react.createElement(TagsInput.A,{value:inputValue,onChange:setInputValue,title:'"TagsInput" component',placeholder:"Insert new value...",...args})),react.createElement(Grid2.A,null,react.createElement(DisplayTags.A,{value:inputValue,title:' "DisplayTags" component',...args})))},Tags_DefaultPreview=DefaultPreview;DefaultPreview.__docgenInfo={description:"",methods:[],displayName:"DefaultPreview"};var robot=__webpack_require__("./src/stories/assets/img/robot.png"),createSvgIcon=__webpack_require__("./.yarn/__virtual__/@mui-material-virtual-caf4cefd95/4/.yarn/berry/cache/@mui-material-npm-6.4.0-9baf3cbb27-10c0.zip/node_modules/@mui/material/utils/createSvgIcon.js"),jsx_runtime=__webpack_require__("../../../.yarn/berry/cache/react-npm-19.0.0-e33c9aa1c0-10c0.zip/node_modules/react/jsx-runtime.js");const Face=(0,createSvgIcon.A)((0,jsx_runtime.jsx)("path",{d:"M9 11.75c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25m6 0c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m0 18c-4.41 0-8-3.59-8-8 0-.29.02-.58.05-.86 2.36-1.05 4.23-2.98 5.21-5.37C11.07 8.33 14.05 10 17.42 10c.78 0 1.53-.09 2.25-.26.21.71.33 1.47.33 2.26 0 4.41-3.59 8-8 8"}),"Face");var clsx=__webpack_require__("../../../.yarn/berry/cache/clsx-npm-2.1.1-96125b98be-10c0.zip/node_modules/clsx/dist/clsx.mjs"),composeClasses=__webpack_require__("./.yarn/__virtual__/@mui-utils-virtual-32aa5adc27/4/.yarn/berry/cache/@mui-utils-npm-6.4.0-fa75de7a7c-10c0.zip/node_modules/@mui/utils/esm/composeClasses/composeClasses.js"),styled=__webpack_require__("./.yarn/__virtual__/@mui-material-virtual-caf4cefd95/4/.yarn/berry/cache/@mui-material-npm-6.4.0-9baf3cbb27-10c0.zip/node_modules/@mui/material/styles/styled.js"),memoTheme=__webpack_require__("./.yarn/__virtual__/@mui-material-virtual-caf4cefd95/4/.yarn/berry/cache/@mui-material-npm-6.4.0-9baf3cbb27-10c0.zip/node_modules/@mui/material/utils/memoTheme.js"),DefaultPropsProvider=__webpack_require__("./.yarn/__virtual__/@mui-material-virtual-caf4cefd95/4/.yarn/berry/cache/@mui-material-npm-6.4.0-9baf3cbb27-10c0.zip/node_modules/@mui/material/DefaultPropsProvider/DefaultPropsProvider.js");const Person=(0,createSvgIcon.A)((0,jsx_runtime.jsx)("path",{d:"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"}),"Person");var generateUtilityClasses=__webpack_require__("./.yarn/__virtual__/@mui-utils-virtual-32aa5adc27/4/.yarn/berry/cache/@mui-utils-npm-6.4.0-fa75de7a7c-10c0.zip/node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js"),generateUtilityClass=__webpack_require__("./.yarn/__virtual__/@mui-utils-virtual-32aa5adc27/4/.yarn/berry/cache/@mui-utils-npm-6.4.0-fa75de7a7c-10c0.zip/node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js");function getAvatarUtilityClass(slot){return(0,generateUtilityClass.Ay)("MuiAvatar",slot)}(0,generateUtilityClasses.A)("MuiAvatar",["root","colorDefault","circular","rounded","square","img","fallback"]);var useSlot=__webpack_require__("./.yarn/__virtual__/@mui-material-virtual-caf4cefd95/4/.yarn/berry/cache/@mui-material-npm-6.4.0-9baf3cbb27-10c0.zip/node_modules/@mui/material/utils/useSlot.js");const AvatarRoot=(0,styled.Ay)("div",{name:"MuiAvatar",slot:"Root",overridesResolver:(props,styles)=>{const{ownerState}=props;return[styles.root,styles[ownerState.variant],ownerState.colorDefault&&styles.colorDefault]}})((0,memoTheme.A)((({theme})=>({position:"relative",display:"flex",alignItems:"center",justifyContent:"center",flexShrink:0,width:40,height:40,fontFamily:theme.typography.fontFamily,fontSize:theme.typography.pxToRem(20),lineHeight:1,borderRadius:"50%",overflow:"hidden",userSelect:"none",variants:[{props:{variant:"rounded"},style:{borderRadius:(theme.vars||theme).shape.borderRadius}},{props:{variant:"square"},style:{borderRadius:0}},{props:{colorDefault:!0},style:{color:(theme.vars||theme).palette.background.default,...theme.vars?{backgroundColor:theme.vars.palette.Avatar.defaultBg}:{backgroundColor:theme.palette.grey[400],...theme.applyStyles("dark",{backgroundColor:theme.palette.grey[600]})}}}]})))),AvatarImg=(0,styled.Ay)("img",{name:"MuiAvatar",slot:"Img",overridesResolver:(props,styles)=>styles.img})({width:"100%",height:"100%",textAlign:"center",objectFit:"cover",color:"transparent",textIndent:1e4}),AvatarFallback=(0,styled.Ay)(Person,{name:"MuiAvatar",slot:"Fallback",overridesResolver:(props,styles)=>styles.fallback})({width:"75%",height:"75%"});const Avatar_Avatar=react.forwardRef((function Avatar(inProps,ref){const props=(0,DefaultPropsProvider.b)({props:inProps,name:"MuiAvatar"}),{alt,children:childrenProp,className,component="div",slots={},slotProps={},imgProps,sizes,src,srcSet,variant="circular",...other}=props;let children=null;const ownerState={...props,component,variant},loaded=function useLoaded({crossOrigin,referrerPolicy,src,srcSet}){const[loaded,setLoaded]=react.useState(!1);return react.useEffect((()=>{if(!src&&!srcSet)return;setLoaded(!1);let active=!0;const image=new Image;return image.onload=()=>{active&&setLoaded("loaded")},image.onerror=()=>{active&&setLoaded("error")},image.crossOrigin=crossOrigin,image.referrerPolicy=referrerPolicy,image.src=src,srcSet&&(image.srcset=srcSet),()=>{active=!1}}),[crossOrigin,referrerPolicy,src,srcSet]),loaded}({...imgProps,..."function"==typeof slotProps.img?slotProps.img(ownerState):slotProps.img,src,srcSet}),hasImg=src||srcSet,hasImgNotFailing=hasImg&&"error"!==loaded;ownerState.colorDefault=!hasImgNotFailing,delete ownerState.ownerState;const classes=(ownerState=>{const{classes,variant,colorDefault}=ownerState,slots={root:["root",variant,colorDefault&&"colorDefault"],img:["img"],fallback:["fallback"]};return(0,composeClasses.A)(slots,getAvatarUtilityClass,classes)})(ownerState),[ImgSlot,imgSlotProps]=(0,useSlot.A)("img",{className:classes.img,elementType:AvatarImg,externalForwardedProps:{slots,slotProps:{img:{...imgProps,...slotProps.img}}},additionalProps:{alt,src,srcSet,sizes},ownerState});return children=hasImgNotFailing?(0,jsx_runtime.jsx)(ImgSlot,{...imgSlotProps}):childrenProp||0===childrenProp?childrenProp:hasImg&&alt?alt[0]:(0,jsx_runtime.jsx)(AvatarFallback,{ownerState,className:classes.fallback}),(0,jsx_runtime.jsx)(AvatarRoot,{as:component,className:(0,clsx.A)(classes.root,className),ref,...other,ownerState,children})})),Tags_stories={title:"Components/Inputs/Tags",component:components.gh,parameters:{docs:{description:{component:"`TagsInput` component provides a user-friendly interface for entering and managing tags or keywords,\nwith support for adding new tags, deleting existing tags, and displaying the tags as chips within the input field.\n\n`DisplayTags` renders the provided array of tags as chips."}}}},Default={parameters:{controls:{hideNoControlsWarning:!0},docs:{source:{code:"\n          <TagsInput value={['value']} onChange={() => {}} placeholder=\"Insert new value...\" />\n          <DisplayTags value={['value']} onChange={() => {}} />\n          ",format:!0}}},render:args=>react.createElement(Tags_DefaultPreview,args)},Size={parameters:{controls:{hideNoControlsWarning:!0},docs:{source:{code:"\n          <DisplayTags size=\"medium\" value={['value']} onChange={() => {}} />\n          <TagsInput size=\"medium\" value={['value']} onChange={() => {}} />\n          ",format:!0}}},render:args=>react.createElement(react.Fragment,null,react.createElement(Tags_DefaultPreview,{size:"medium",...args}),react.createElement(Tags_DefaultPreview,args))},Icons={parameters:{controls:{hideNoControlsWarning:!0},docs:{source:{code:"\n          <DisplayTags icon: <Face /> value={['value']} onChange={() => {}} />\n          <TagsInput icon: <Face /> value={['value']} onChange={() => {}} />\n          \n          <DisplayTags avatar={<Avatar alt=\"Robot\" src=\"../../assets/img/robot.png\" />} value={['value']} onChange={() => {}} />\n          <TagsInput avatar={<Avatar alt=\"Robot\" src=\"../../assets/img/robot.png\" />} value={['value']} onChange={() => {}} />\n          ",format:!0}}},render:args=>react.createElement(react.Fragment,null,react.createElement(Tags_DefaultPreview,{icon:react.createElement(Face,null),...args}),react.createElement(Tags_DefaultPreview,{avatar:react.createElement(Avatar_Avatar,{alt:"Robot",src:robot}),...args}))},Variants={parameters:{controls:{hideNoControlsWarning:!0},docs:{source:{code:'\n          <DisplayTags variant="variant-option-here" color="color_code" value={[\'value\']} onChange={() => {}} />\n          <TagsInput variant="variant-option-here" color="color_code" value={[\'value\']} onChange={() => {}} />\n          ',format:!0}}},render:args=>react.createElement(Tags_VariantsPreview,args)},__namedExportsOrder=["Default","Size","Icons","Variants"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    controls: {\n      hideNoControlsWarning: true\n    },\n    docs: {\n      source: {\n        code: `\n          <TagsInput value={['value']} onChange={() => {}} placeholder=\"Insert new value...\" />\n          <DisplayTags value={['value']} onChange={() => {}} />\n          `,\n        format: true\n      }\n    }\n  },\n  render: args => <DefaultPreview {...args} />\n}",...Default.parameters?.docs?.source},description:{story:"Default TagsInput component.",...Default.parameters?.docs?.description}}},Size.parameters={...Size.parameters,docs:{...Size.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    controls: {\n      hideNoControlsWarning: true\n    },\n    docs: {\n      source: {\n        code: `\n          <DisplayTags size="medium" value={[\'value\']} onChange={() => {}} />\n          <TagsInput size="medium" value={[\'value\']} onChange={() => {}} />\n          `,\n        format: true\n      }\n    }\n  },\n  render: args => <>\n      <DefaultPreview size="medium" {...args} />\n      <DefaultPreview {...args} />\n    </>\n}',...Size.parameters?.docs?.source},description:{story:'You can use the size prop to define a bigger Tag. Default is "small"',...Size.parameters?.docs?.description}}},Icons.parameters={...Icons.parameters,docs:{...Icons.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    controls: {\n      hideNoControlsWarning: true\n    },\n    docs: {\n      source: {\n        code: `\n          <DisplayTags icon: <Face /> value={[\'value\']} onChange={() => {}} />\n          <TagsInput icon: <Face /> value={[\'value\']} onChange={() => {}} />\n          \n          <DisplayTags avatar={<Avatar alt="Robot" src="../../assets/img/robot.png" />} value={[\'value\']} onChange={() => {}} />\n          <TagsInput avatar={<Avatar alt="Robot" src="../../assets/img/robot.png" />} value={[\'value\']} onChange={() => {}} />\n          `,\n        format: true\n      }\n    }\n  },\n  render: args => <>\n      <DefaultPreview icon={<Face />} {...args} />\n      <DefaultPreview avatar={<Avatar alt="Robot" src={bitImage} />} {...args} />\n    </>\n}',...Icons.parameters?.docs?.source},description:{story:'You can add ornaments to the beginning of the component.\nUse the "avatar" prop to add an avatar or use the "icon" prop to add an icon.',...Icons.parameters?.docs?.description}}},Variants.parameters={...Variants.parameters,docs:{...Variants.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    controls: {\n      hideNoControlsWarning: true\n    },\n    docs: {\n      source: {\n        code: `\n          <DisplayTags variant="variant-option-here" color="color_code" value={[\'value\']} onChange={() => {}} />\n          <TagsInput variant="variant-option-here" color="color_code" value={[\'value\']} onChange={() => {}} />\n          `,\n        format: true\n      }\n    }\n  },\n  render: args => <VariantsPreview {...args} />\n}',...Variants.parameters?.docs?.source},description:{story:'You can use the "variant" to change the display option of the tag and the "color" prop to define a color from theme palette.',...Variants.parameters?.docs?.description}}}},"./src/stories/assets/img/robot.png":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__.p+"static/media/robot.27205e8b.png"}}]);