"use strict";(self.webpackChunk_totalsoft_rocket_ui=self.webpackChunk_totalsoft_rocket_ui||[]).push([[252],{"./src/stories/feedback/Dialog/Dialog.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Actions:()=>Actions,Default:()=>Default,DefaultActions:()=>DefaultActions,Dividers:()=>Dividers,TextContent:()=>TextContent,TransparentBackground:()=>TransparentBackground,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Dialog_stories});var react=__webpack_require__("../../../.yarn/berry/cache/react-npm-19.0.0-e33c9aa1c0-10c0.zip/node_modules/react/index.js"),components=__webpack_require__("./src/components/index.ts"),Grid2=__webpack_require__("./.yarn/__virtual__/@mui-material-virtual-caf4cefd95/4/.yarn/berry/cache/@mui-material-npm-6.4.0-9baf3cbb27-10c0.zip/node_modules/@mui/material/Grid2/Grid2.js");const title="Dialog component",_mocks_text="Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks.",DefaultPreview=(Grid2.A,components.Zp,({button,...props})=>{const[open,setOpen]=(0,react.useState)(!1),toggle=(0,react.useCallback)((()=>setOpen((current=>!current))),[]);return react.createElement(react.Fragment,null,react.createElement(components.$n,{children:button,variant:"outlined",onClick:toggle}),react.createElement(components.E3,{...props,id:"default-dialog",open,onClose:toggle}))}),Dialog_DefaultPreview=DefaultPreview;DefaultPreview.__docgenInfo={description:"",methods:[],displayName:"DefaultPreview"};const ActionsPreview=({button,...props})=>{const[open,setOpen]=(0,react.useState)(!1),toggle=(0,react.useCallback)((()=>setOpen((current=>!current))),[]);return react.createElement(react.Fragment,null,react.createElement(components.$n,{children:button,variant:"outlined",onClick:toggle}),react.createElement(components.E3,{...props,id:"default-dialog",open,onClose:toggle,showX:!1,disableBackdropClick:!0,disableEscapeKeyDown:!0,content:react.createElement(Grid2.A,{container:!0,spacing:2,justifyContent:"center",sx:{pt:3}},react.createElement(Grid2.A,{size:10},react.createElement(components.A_,{label:"username",fullWidth:!0})),react.createElement(Grid2.A,{size:10},react.createElement(components.A_,{label:"password",type:"password",fullWidth:!0}))),actions:react.createElement(react.Fragment,null,react.createElement(components.$n,{onClick:toggle,color:"primary",variant:"contained",size:"small"},"cancel"),react.createElement(components.$n,{onClick:toggle,color:"primary",variant:"contained",size:"small"},"continue"))}))},Dialog_ActionsPreview=ActionsPreview;ActionsPreview.__docgenInfo={description:"",methods:[],displayName:"ActionsPreview"};const Dialog_stories={title:"Components/Feedback/Dialog",component:components.E3},Default={parameters:{docs:{source:{code:'\n        <Button children="basic dialog" variant="outlined" onClick={toggle} />\n        <Dialog id="default-dialog" title="Title" content="Some text content" open={open} onClose={toggle} />\n        ',format:!0}}},args:{title,content:_mocks_text},render:args=>react.createElement(Dialog_DefaultPreview,{button:"Open Dialog",...args})},TextContent={parameters:{docs:{source:{code:'\n        <Button children="basic dialog" maxWidth="lg" variant="outlined" onClick={toggle} />\n        <Dialog id="default-dialog" title="Title" textContent="Some text content" open={open} onClose={toggle} />\n        ',format:!0}}},args:{title,textContent:"A Dialog is a type of modal window that appears in front of app content to provide critical information or ask for a decision. Dialogs disable all app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken. Dialogs are purposefully interruptive, so they should be used sparingly. Simple dialogs can provide additional details or actions about a list item. For example, they can display avatars, icons, clarifying subtext, or orthogonal actions (such as adding an account). A Dialog is a type of modal window that appears in front of app content to provide critical information or ask for a decision. Dialogs disable all app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken. Dialogs are purposefully interruptive, so they should be used sparingly. Simple dialogs can provide additional details or actions about a list item. For example, they can display avatars, icons, clarifying subtext, or orthogonal actions (such as adding an account). A Dialog is a type of modal window that appears in front of app content to provide critical information or ask for a decision. Dialogs disable all app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken. Dialogs are purposefully interruptive, so they should be used sparingly. Simple dialogs can provide additional details or actions about a list item. For example, they can display avatars, icons, clarifying subtext, or orthogonal actions (such as adding an account). A Dialog is a type of modal window that appears in front of app content to provide critical information or ask for a decision. Dialogs disable all app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken. Dialogs are purposefully interruptive, so they should be used sparingly. Simple dialogs can provide additional details or actions about a list item. For example, they can display avatars, icons, clarifying subtext, or orthogonal actions (such as adding an account). A Dialog is a type of modal window that appears in front of app content to provide critical information or ask for a decision. Dialogs disable all app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken. Dialogs are purposefully interruptive, so they should be used sparingly. Simple dialogs can provide additional details or actions about a list item. For example, they can display avatars, icons, clarifying subtext, or orthogonal actions (such as adding an account). A Dialog is a type of modal window that appears in front of app content to provide critical information or ask for a decision. Dialogs disable all app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken. Dialogs are purposefully interruptive, so they should be used sparingly. Simple dialogs can provide additional details or actions about a list item. For example, they can display avatars, icons, clarifying subtext, or orthogonal actions (such as adding an account).",maxWidth:"lg"},render:args=>react.createElement(Dialog_DefaultPreview,{button:"Open Dialog",...args})},Dividers={parameters:{docs:{source:{code:'\n        <Button children="basic dialog" variant="outlined" onClick={toggle} />\n        <Dialog id="default-dialog" dividers title="Title" textContent="Some text content" open={open} onClose={toggle} />\n        ',format:!0}}},args:{title,textContent:_mocks_text,dividers:!0},render:args=>react.createElement(Dialog_DefaultPreview,{button:"Open Dialog",...args})},TransparentBackground={parameters:{docs:{source:{code:'\n        <Button children="basic dialog" variant="outlined" onClick={toggle} />\n        <Dialog id="default-dialog" transparentBackdrop title="Title" textContent="Some text content" open={open} onClose={toggle} />\n        ',format:!0}}},args:{title,textContent:_mocks_text,transparentBackdrop:!0},render:args=>react.createElement(Dialog_DefaultPreview,{button:"Open Dialog",...args})},Actions={parameters:{docs:{source:{code:'\n        <Button children={button} variant="outlined" onClick={toggle} />\n        <Dialog\n          id="default-dialog"\n          open={open}\n          onClose={toggle}\n          showX={false}\n          disableBackdropClick={true}\n          disableEscapeKeyDown={true}\n          content={\n            <Grid container spacing={2} justifyContent={\'center\'} sx={{ pt: 3 }}>\n              <Grid  size={10}>\n                <TextField label="username" fullWidth />\n              </Grid>\n              <Grid  size={10}>\n                <TextField label="password" type="password" fullWidth />\n              </Grid>\n            </Grid>\n          }\n          actions={\n            <>\n              <Button onClick={toggle} color="primary" variant="contained" size="small">\n                {\'cancel\'}\n              </Button>\n              <Button onClick={toggle} color="primary" variant="contained" size="small">\n                {\'continue\'}\n              </Button>\n            </>\n          }\n        />\n        ',format:!0}}},args:{title,textContent:_mocks_text},render:args=>react.createElement(Dialog_ActionsPreview,{button:"Open Dialog",...args})},DefaultActions={parameters:{docs:{source:{code:'\n        <Button children="basic dialog" variant="outlined" onClick={toggle} />\n        <Dialog id="default-dialog" defaultActions title="Title" textContent="Some text content" open={open} onClose={toggle} />\n        ',format:!0}}},args:{title,textContent:_mocks_text,defaultActions:!0},render:args=>react.createElement(Dialog_DefaultPreview,{button:"Open Dialog",...args})},__namedExportsOrder=["Default","TextContent","Dividers","TransparentBackground","Actions","DefaultActions"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      source: {\n        code: `\n        <Button children="basic dialog" variant="outlined" onClick={toggle} />\n        <Dialog id="default-dialog" title="Title" content="Some text content" open={open} onClose={toggle} />\n        `,\n        format: true\n      }\n    }\n  },\n  args: {\n    title,\n    content: text\n  },\n  render: args => <DefaultPreview button="Open Dialog" {...args} />\n}',...Default.parameters?.docs?.source},description:{story:"Simple dialogs can provide additional details or actions about a list item. For example, they can display avatars, icons, clarifying subtext, or orthogonal actions (such as adding an account).\n\nTouch mechanics:\n- Choosing an option immediately commits the option and closes the menu\n- Touching outside of the dialog, or pressing Back, cancels the action and closes the dialog",...Default.parameters?.docs?.description}}},TextContent.parameters={...TextContent.parameters,docs:{...TextContent.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      source: {\n        code: `\n        <Button children="basic dialog" maxWidth="lg" variant="outlined" onClick={toggle} />\n        <Dialog id="default-dialog" title="Title" textContent="Some text content" open={open} onClose={toggle} />\n        `,\n        format: true\n      }\n    }\n  },\n  args: {\n    title,\n    textContent: longText,\n    maxWidth: \'lg\'\n  },\n  render: args => <DefaultPreview button="Open Dialog" {...args} />\n}',...TextContent.parameters?.docs?.source},description:{story:"Text content of the dialog. If received, it will be wrapped by the MUI DialogContentText component.",...TextContent.parameters?.docs?.description}}},Dividers.parameters={...Dividers.parameters,docs:{...Dividers.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      source: {\n        code: `\n        <Button children="basic dialog" variant="outlined" onClick={toggle} />\n        <Dialog id="default-dialog" dividers title="Title" textContent="Some text content" open={open} onClose={toggle} />\n        `,\n        format: true\n      }\n    }\n  },\n  args: {\n    title,\n    textContent: text,\n    dividers: true\n  },\n  render: args => <DefaultPreview button="Open Dialog" {...args} />\n}',...Dividers.parameters?.docs?.source},description:{story:"To add something more to your dialog design, you can set the `dividers` property to `true` and it will display dividers at the top and bottom of DialogContent.",...Dividers.parameters?.docs?.description}}},TransparentBackground.parameters={...TransparentBackground.parameters,docs:{...TransparentBackground.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      source: {\n        code: `\n        <Button children="basic dialog" variant="outlined" onClick={toggle} />\n        <Dialog id="default-dialog" transparentBackdrop title="Title" textContent="Some text content" open={open} onClose={toggle} />\n        `,\n        format: true\n      }\n    }\n  },\n  args: {\n    title,\n    textContent: text,\n    transparentBackdrop: true\n  },\n  render: args => <DefaultPreview button="Open Dialog" {...args} />\n}',...TransparentBackground.parameters?.docs?.source},description:{story:"By setting the `transparentBackdrop` property to `true`, the backdrop (the outer background) will be transparent.",...TransparentBackground.parameters?.docs?.description}}},Actions.parameters={...Actions.parameters,docs:{...Actions.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      source: {\n        code: `\n        <Button children={button} variant="outlined" onClick={toggle} />\n        <Dialog\n          id="default-dialog"\n          open={open}\n          onClose={toggle}\n          showX={false}\n          disableBackdropClick={true}\n          disableEscapeKeyDown={true}\n          content={\n            <Grid container spacing={2} justifyContent={\'center\'} sx={{ pt: 3 }}>\n              <Grid  size={10}>\n                <TextField label="username" fullWidth />\n              </Grid>\n              <Grid  size={10}>\n                <TextField label="password" type="password" fullWidth />\n              </Grid>\n            </Grid>\n          }\n          actions={\n            <>\n              <Button onClick={toggle} color="primary" variant="contained" size="small">\n                {\'cancel\'}\n              </Button>\n              <Button onClick={toggle} color="primary" variant="contained" size="small">\n                {\'continue\'}\n              </Button>\n            </>\n          }\n        />\n        `,\n        format: true\n      }\n    }\n  },\n  args: {\n    title,\n    textContent: text\n  },\n  render: args => <ActionsPreview button="Open Dialog" {...args} />\n}',...Actions.parameters?.docs?.source},description:{story:"To implement additional actions to our Dialog content, take advantage of the `actions` property. It can receive any ReactNode value.",...Actions.parameters?.docs?.description}}},DefaultActions.parameters={...DefaultActions.parameters,docs:{...DefaultActions.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      source: {\n        code: `\n        <Button children="basic dialog" variant="outlined" onClick={toggle} />\n        <Dialog id="default-dialog" defaultActions title="Title" textContent="Some text content" open={open} onClose={toggle} />\n        `,\n        format: true\n      }\n    }\n  },\n  args: {\n    title,\n    textContent: text,\n    defaultActions: true\n  },\n  render: args => <DefaultPreview button="Open Dialog" {...args} />\n}',...DefaultActions.parameters?.docs?.source},description:{story:"We can set default `Yes/No` actions by passing `defaultActions` property to `true.`\n\nIf `true`, the following properties would be required: `onYes` and @onClose.\n\nThe two default buttons can be configured using `defaultActionsProps` property.",...DefaultActions.parameters?.docs?.description}}}}}]);