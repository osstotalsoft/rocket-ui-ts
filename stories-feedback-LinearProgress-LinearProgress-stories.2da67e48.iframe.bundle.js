"use strict";(self.webpackChunk_totalsoft_rocket_ui=self.webpackChunk_totalsoft_rocket_ui||[]).push([[876],{"./src/stories/feedback/LinearProgress/LinearProgress.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Colors:()=>Colors,Default:()=>Default,Global:()=>Global,Variants:()=>Variants,__namedExportsOrder:()=>__namedExportsOrder,default:()=>LinearProgress_stories});var react=__webpack_require__("../../../.yarn/berry/cache/react-npm-18.3.1-af38f3c1ae-10c0.zip/node_modules/react/index.js"),Box=__webpack_require__("./.yarn/__virtual__/@mui-material-virtual-2baa73ee9f/4/.yarn/berry/cache/@mui-material-npm-6.1.6-6fe62c1d46-10c0.zip/node_modules/@mui/material/Box/Box.js"),components=__webpack_require__("./src/components/index.ts"),Grid2=__webpack_require__("./.yarn/__virtual__/@mui-material-virtual-2baa73ee9f/4/.yarn/berry/cache/@mui-material-npm-6.1.6-6fe62c1d46-10c0.zip/node_modules/@mui/material/Grid2/Grid2.js");const ColorsPreview=()=>react.createElement(Grid2.A,{container:!0,rowSpacing:2,columnSpacing:4},react.createElement(Grid2.A,{size:{sm:6}},react.createElement(components.o5,{textAlign:"center"},"primary"),react.createElement(components.hZ,{color:"primary"})),react.createElement(Grid2.A,{size:{sm:6}},react.createElement(components.o5,{textAlign:"center"},"warning"),react.createElement(components.hZ,{color:"warning"})),react.createElement(Grid2.A,{size:{sm:6}},react.createElement(components.o5,{textAlign:"center"},"error"),react.createElement(components.hZ,{color:"error"})),react.createElement(Grid2.A,{size:{sm:6}},react.createElement(components.o5,{textAlign:"center"},"success"),react.createElement(components.hZ,{color:"success"})),react.createElement(Grid2.A,{size:{sm:6}},react.createElement(components.o5,{textAlign:"center"},"info"),react.createElement(components.hZ,{color:"info"})),react.createElement(Grid2.A,{size:{sm:6}},react.createElement(components.o5,{textAlign:"center"},"rose"),react.createElement(components.hZ,{color:"rose"})),react.createElement(Grid2.A,{size:{sm:6}},react.createElement(components.o5,{textAlign:"center"},"grey (default)"),react.createElement(components.hZ,{color:"grey"}))),LinearProgress_ColorsPreview=ColorsPreview;ColorsPreview.__docgenInfo={description:"",methods:[],displayName:"ColorsPreview"};const VariantsPreview=()=>{const[progress,setProgress]=(0,react.useState)(0),[buffer,setBuffer]=(0,react.useState)(10),progressRef=(0,react.useRef)((()=>{}));return(0,react.useEffect)((()=>{progressRef.current=()=>{if(100===progress)setProgress(0),setBuffer(10);else{const diff=10*Math.random(),diff2=10*Math.random();setProgress(Math.min(progress+diff,100)),setBuffer(Math.min(progress+diff+diff2,100))}}})),(0,react.useEffect)((()=>{const timer=setInterval((()=>{progressRef.current()}),500);return()=>{clearInterval(timer)}}),[]),react.createElement(Grid2.A,{container:!0,rowSpacing:2,columnSpacing:2},react.createElement(Grid2.A,{size:{sm:6}},react.createElement(components.o5,{textAlign:"center"},"determinate "),react.createElement(components.hZ,{variant:"determinate",value:progress})),react.createElement(Grid2.A,{size:{sm:6}},react.createElement(components.o5,{textAlign:"center"},"buffer "),react.createElement(components.hZ,{variant:"buffer",value:progress,valueBuffer:buffer})),react.createElement(Grid2.A,{size:{sm:6}},react.createElement(components.o5,{textAlign:"center"},"indeterminate"),react.createElement(components.hZ,null)),react.createElement(Grid2.A,{size:{sm:6}},react.createElement(components.o5,{textAlign:"center"},"determinate with label"),react.createElement(components.hZ,{variant:"determinate",value:progress,showLabel:!0})),react.createElement(Grid2.A,{size:{sm:6}},react.createElement(components.o5,{textAlign:"center"},"buffer with label"),react.createElement(components.hZ,{variant:"buffer",value:progress,valueBuffer:buffer,showLabel:!0})))},LinearProgress_VariantsPreview=VariantsPreview;VariantsPreview.__docgenInfo={description:"",methods:[],displayName:"VariantsPreview"};const GlobalPreview=()=>{const[show,setShow]=(0,react.useState)(!1);return react.createElement(Box.A,null,show&&react.createElement(components.hZ,{global:!0}),react.createElement(components.$n,{onClick:()=>setShow((prev=>!prev))},"Toggle global loader"))},LinearProgress_GlobalPreview=GlobalPreview;GlobalPreview.__docgenInfo={description:"",methods:[],displayName:"GlobalPreview"};const LinearProgress_stories={title:"Components/Feedback/LinearProgress",component:components.hZ},Default={render:args=>react.createElement(Box.A,{sx:{width:"400px"}},react.createElement(components.hZ,args))},Colors={parameters:{docs:{source:{code:"\n        <LinearProgress color={'rose'} />\n        ",format:!0}}},render:()=>react.createElement(LinearProgress_ColorsPreview,null)},Variants={parameters:{docs:{source:{code:"\n        const VariantsPreview = () => {\n          const [progress, setProgress] = useState(0)\n          const [buffer, setBuffer] = useState(10)\n        \n          const progressRef = useRef(() => {})\n        \n          useEffect(() => {\n            progressRef.current = () => {\n              if (progress === 100) {\n                setProgress(0)\n                setBuffer(10)\n              } else {\n                const diff = Math.random() * 10\n                const diff2 = Math.random() * 10\n                setProgress(Math.min(progress + diff, 100))\n                setBuffer(Math.min(progress + diff + diff2, 100))\n              }\n            }\n          })\n        \n          useEffect(() => {\n            const timer = setInterval(() => {\n              progressRef.current()\n            }, 500)\n        \n            return () => {\n              clearInterval(timer)\n            }\n          }, [])\n          return (\n            <Grid container rowSpacing={2} columnSpacing={2}>\n              <Grid  size={{ sm: 6 }}>\n                <Typography textAlign={'center'}>{'determinate '}</Typography>\n                <LinearProgress variant={'determinate'} value={progress} />\n              </Grid>\n              <Grid  size={{ sm: 6 }}>\n                <Typography textAlign={'center'}>{'buffer '}</Typography>\n                <LinearProgress variant=\"buffer\" value={progress} valueBuffer={buffer} />\n              </Grid>\n              <Grid  size={{ sm: 6 }}>\n                <Typography textAlign={'center'}>{'indeterminate'}</Typography>\n                <LinearProgress />\n              </Grid>\n              <Grid  size={{ sm: 6 }}>\n                <Typography textAlign={'center'}>{'determinate with label'}</Typography>\n                <LinearProgress variant={'determinate'} value={progress} showLabel />\n              </Grid>\n              <Grid  size={{ sm: 6 }}>\n                <Typography textAlign={'center'}>{'buffer with label'}</Typography>\n                <LinearProgress variant=\"buffer\" value={progress} valueBuffer={buffer} showLabel />\n              </Grid>\n            </Grid>\n          )\n        }\n        ",format:!0}}},render:()=>react.createElement(LinearProgress_VariantsPreview,null)},Global={parameters:{controls:{hideNoControlsWarning:!0},docs:{source:{code:"\n          <LinearProgress global />\n        ",format:!0}}},render:()=>react.createElement(LinearProgress_GlobalPreview,null)},__namedExportsOrder=["Default","Colors","Variants","Global"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: args => <Box sx={{\n    width: '400px'\n  }}>\n      <LinearProgress {...args} />\n    </Box>\n}",...Default.parameters?.docs?.source},description:{story:"The default `<LinearProgress />` component\n\nThe animations of the components rely on CSS as much as possible to work even before the JavaScript is loaded.",...Default.parameters?.docs?.description}}},Colors.parameters={...Colors.parameters,docs:{...Colors.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      source: {\n        code: `\n        <LinearProgress color={'rose'} />\n        `,\n        format: true\n      }\n    }\n  },\n  render: () => <ColorsPreview />\n}",...Colors.parameters?.docs?.source}}},Variants.parameters={...Variants.parameters,docs:{...Variants.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      source: {\n        code: `\n        const VariantsPreview = () => {\n          const [progress, setProgress] = useState(0)\n          const [buffer, setBuffer] = useState(10)\n        \n          const progressRef = useRef(() => {})\n        \n          useEffect(() => {\n            progressRef.current = () => {\n              if (progress === 100) {\n                setProgress(0)\n                setBuffer(10)\n              } else {\n                const diff = Math.random() * 10\n                const diff2 = Math.random() * 10\n                setProgress(Math.min(progress + diff, 100))\n                setBuffer(Math.min(progress + diff + diff2, 100))\n              }\n            }\n          })\n        \n          useEffect(() => {\n            const timer = setInterval(() => {\n              progressRef.current()\n            }, 500)\n        \n            return () => {\n              clearInterval(timer)\n            }\n          }, [])\n          return (\n            <Grid container rowSpacing={2} columnSpacing={2}>\n              <Grid  size={{ sm: 6 }}>\n                <Typography textAlign={'center'}>{'determinate '}</Typography>\n                <LinearProgress variant={'determinate'} value={progress} />\n              </Grid>\n              <Grid  size={{ sm: 6 }}>\n                <Typography textAlign={'center'}>{'buffer '}</Typography>\n                <LinearProgress variant=\"buffer\" value={progress} valueBuffer={buffer} />\n              </Grid>\n              <Grid  size={{ sm: 6 }}>\n                <Typography textAlign={'center'}>{'indeterminate'}</Typography>\n                <LinearProgress />\n              </Grid>\n              <Grid  size={{ sm: 6 }}>\n                <Typography textAlign={'center'}>{'determinate with label'}</Typography>\n                <LinearProgress variant={'determinate'} value={progress} showLabel />\n              </Grid>\n              <Grid  size={{ sm: 6 }}>\n                <Typography textAlign={'center'}>{'buffer with label'}</Typography>\n                <LinearProgress variant=\"buffer\" value={progress} valueBuffer={buffer} showLabel />\n              </Grid>\n            </Grid>\n          )\n        }\n        `,\n        format: true\n      }\n    }\n  },\n  render: () => <VariantsPreview />\n}",...Variants.parameters?.docs?.source}}},Global.parameters={...Global.parameters,docs:{...Global.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    controls: {\n      hideNoControlsWarning: true\n    },\n    docs: {\n      source: {\n        code: `\n          <LinearProgress global />\n        `,\n        format: true\n      }\n    }\n  },\n  render: () => <GlobalPreview />\n}",...Global.parameters?.docs?.source}}}}}]);