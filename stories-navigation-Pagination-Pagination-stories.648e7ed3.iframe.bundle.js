"use strict";(self.webpackChunk_totalsoft_rocket_ui=self.webpackChunk_totalsoft_rocket_ui||[]).push([[933],{"./src/stories/navigation/Pagination/Pagination.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:function(){return Default},WithFirstAndLastOptions:function(){return WithFirstAndLastOptions},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return Pagination_stories}});var react=__webpack_require__("../../../.yarn/berry/cache/react-npm-18.2.0-1eae08fee2-10c0.zip/node_modules/react/index.js"),Pagination=__webpack_require__("./src/components/navigation/Pagination/index.ts"),components=__webpack_require__("./src/components/index.ts");const WithFirstAndLastPreview=()=>{const[page,setPage]=(0,react.useState)(0),[pageSize,setPageSize]=(0,react.useState)(10),handleChangePage=(0,react.useCallback)((value=>{setPage(value)}),[]),handleChangeRowsPerPage=(0,react.useCallback)((value=>{setPageSize(value),setPage(0)}),[]);return react.createElement(components.tl,{count:100,page:page,onPageChange:handleChangePage,pageSize:pageSize,onRowsPerPageChange:handleChangeRowsPerPage,showFirstButton:!0,showLastButton:!0})};var Pagination_WithFirstAndLastPreview=WithFirstAndLastPreview;WithFirstAndLastPreview.__docgenInfo={description:"",methods:[],displayName:"WithFirstAndLastPreview"};const DefaultPreview=args=>{const[page,setPage]=(0,react.useState)(0),[pageSize,setPageSize]=(0,react.useState)(10),handleChangePage=(0,react.useCallback)((value=>{setPage(value)}),[]),handleChangeRowsPerPage=(0,react.useCallback)((value=>{setPageSize(value),setPage(0)}),[]);return react.createElement(components.tl,{...args,page:page,onPageChange:handleChangePage,pageSize:pageSize,onRowsPerPageChange:handleChangeRowsPerPage})};var Pagination_DefaultPreview=DefaultPreview;DefaultPreview.__docgenInfo={description:"",methods:[],displayName:"DefaultPreview"};var Pagination_stories={title:"Components/Navigation/Pagination",component:Pagination.Z};const Default={args:{count:100},parameters:{docs:{source:{code:"\n        const [page, setPage] = useState(0)\n        const [pageSize, setPageSize] = useState(17)\n\n        const handleChangePage = useCallback((value) => {\n          setPage(value)\n        }, [])\n\n        const handleChangeRowsPerPage = useCallback((value) => {\n          setPageSize(value)\n          setPage(0)\n        }, [])\n\n        return (\n          <Pagination\n            count={100}\n            page={page}\n            onPageChange={handleChangePage}\n            pageSize={pageSize}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n        )\n        ",format:!0}}},render:args=>react.createElement(Pagination_DefaultPreview,args)},WithFirstAndLastOptions={args:{count:100,showFirstButton:!0,showLastButton:!0,onPageChange:void 0,onRowsPerPageChange:void 0},parameters:{controls:{hideNoControlsWarning:!0},docs:{source:{code:"\n        const [page, setPage] = useState(0)\n        const [pageSize, setPageSize] = useState(17)\n\n        const handleChangePage = useCallback((value) => {\n          setPage(value)\n        }, [])\n\n        const handleChangeRowsPerPage = useCallback((value) => {\n          setPageSize(value)\n          setPage(0)\n        }, [])\n\n        return (\n          <Pagination\n            count={100}\n            page={page}\n            onPageChange={handleChangePage}\n            pageSize={pageSize}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n            showFirstButton={true}\n            showLastButton={true}\n          />\n        )\n        ",format:!0}}},render:()=>react.createElement(Pagination_WithFirstAndLastPreview,null)},__namedExportsOrder=["Default","WithFirstAndLastOptions"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    count: 100\n  },\n  parameters: {\n    docs: {\n      source: {\n        code: `\n        const [page, setPage] = useState(0)\n        const [pageSize, setPageSize] = useState(17)\n\n        const handleChangePage = useCallback((value) => {\n          setPage(value)\n        }, [])\n\n        const handleChangeRowsPerPage = useCallback((value) => {\n          setPageSize(value)\n          setPage(0)\n        }, [])\n\n        return (\n          <Pagination\n            count={100}\n            page={page}\n            onPageChange={handleChangePage}\n            pageSize={pageSize}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n        )\n        `,\n        format: true\n      }\n    }\n  },\n  render: args => <DefaultPreview {...args} />\n}",...Default.parameters?.docs?.source},description:{story:"This is the default Pagination component. It enables the user to select a specific page from a range of pages,\nrefreshes the entries using the refresh button and allows choosing a number of displayed elements per page.",...Default.parameters?.docs?.description}}},WithFirstAndLastOptions.parameters={...WithFirstAndLastOptions.parameters,docs:{...WithFirstAndLastOptions.parameters?.docs,source:{originalSource:"{\n  args: {\n    count: 100,\n    showFirstButton: true,\n    showLastButton: true,\n    onPageChange: undefined,\n    onRowsPerPageChange: undefined\n  },\n  parameters: {\n    controls: {\n      hideNoControlsWarning: true\n    },\n    docs: {\n      source: {\n        code: `\n        const [page, setPage] = useState(0)\n        const [pageSize, setPageSize] = useState(17)\n\n        const handleChangePage = useCallback((value) => {\n          setPage(value)\n        }, [])\n\n        const handleChangeRowsPerPage = useCallback((value) => {\n          setPageSize(value)\n          setPage(0)\n        }, [])\n\n        return (\n          <Pagination\n            count={100}\n            page={page}\n            onPageChange={handleChangePage}\n            pageSize={pageSize}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n            showFirstButton={true}\n            showLastButton={true}\n          />\n        )\n        `,\n        format: true\n      }\n    }\n  },\n  render: () => <WithFirstAndLastPreview />\n}",...WithFirstAndLastOptions.parameters?.docs?.source},description:{story:"You can optionally enable first-page and last-page buttons, or disable the previous-page and next-page buttons.",...WithFirstAndLastOptions.parameters?.docs?.description}}}}}]);